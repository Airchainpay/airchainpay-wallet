#!/usr/bin/env node

/**
 * Android Emulator Fix Script
 * 
 * This script helps fix common Android emulator issues:
 * - Unresponsive Pixel Launcher
 * - Hostname resolution issues
 * - Performance problems
 */

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');
const os = require('os');

console.log('üîß Android Emulator Fix Tool');
console.log('===========================');

// Get the script directory
const scriptDir = path.dirname(process.argv[1]);
const projectRoot = path.join(scriptDir, '..');

// Check if running on macOS
const isMac = process.platform === 'darwin';
if (isMac) {
  console.log('‚úÖ Detected macOS environment');
} else {
  console.log('‚ö†Ô∏è This script is optimized for macOS. Some steps may not work on your platform.');
}

// Kill existing emulator processes
console.log('\nüîÑ Stopping any running emulators...');
try {
  if (isMac) {
    execSync('pkill -f "qemu-system-" || true');
    execSync('pkill -f "emulator" || true');
    console.log('‚úÖ Stopped running emulators');
  } else {
    console.log('‚ö†Ô∏è Please manually close any running emulators');
  }
} catch (error) {
  // Ignore errors from pkill
}

// Create a .env.local file with the correct configuration
const envPath = path.join(projectRoot, '.env.local');
const envContent = `
# Android Emulator Connection Fix
# This file was generated by fix-emulator.js
EXPO_DEVTOOLS_LISTEN_ADDRESS=0.0.0.0
REACT_NATIVE_PACKAGER_HOSTNAME=10.0.2.2
`;

try {
  fs.writeFileSync(envPath, envContent, 'utf8');
  console.log(`‚úÖ Created .env.local with proper configuration`);
} catch (error) {
  console.error(`‚ùå Error creating .env.local: ${error.message}`);
}

// Create a script to launch the emulator with better settings
const emulatorScriptPath = path.join(projectRoot, 'scripts', 'start-emulator.sh');
const emulatorScriptContent = `#!/bin/bash

# Find the Android SDK path
if [ -z "$ANDROID_SDK_ROOT" ]; then
  if [ -d "$HOME/Library/Android/sdk" ]; then
    ANDROID_SDK_ROOT="$HOME/Library/Android/sdk"
  elif [ -d "$HOME/Android/Sdk" ]; then
    ANDROID_SDK_ROOT="$HOME/Android/Sdk"
  else
    echo "‚ùå Could not find Android SDK. Please set ANDROID_SDK_ROOT environment variable."
    exit 1
  fi
fi

EMULATOR_PATH="$ANDROID_SDK_ROOT/emulator/emulator"
AVD_NAME="Medium_Phone_API_36"

# Check if emulator exists
if [ ! -f "$EMULATOR_PATH" ]; then
  echo "‚ùå Emulator not found at $EMULATOR_PATH"
  exit 1
fi

# Kill any running emulators
pkill -f "qemu-system-" || true
pkill -f "emulator" || true

echo "üöÄ Starting emulator with optimized settings..."
"$EMULATOR_PATH" \\
  -avd $AVD_NAME \\
  -no-boot-anim \\
  -gpu host \\
  -memory 2048 \\
  -no-snapshot \\
  -no-audio \\
  -no-snapshot-save &

echo "‚è≥ Waiting for emulator to boot..."
"$ANDROID_SDK_ROOT/platform-tools/adb" wait-for-device

echo "‚úÖ Emulator started successfully!"
echo "Now run: npm run start-fixed"
`;

try {
  fs.writeFileSync(emulatorScriptPath, emulatorScriptContent, 'utf8');
  execSync(`chmod +x ${emulatorScriptPath}`);
  console.log(`‚úÖ Created emulator script at ${emulatorScriptPath}`);
} catch (error) {
  console.error(`‚ùå Error creating emulator script: ${error.message}`);
}

// Update package.json to add the new script
const packageJsonPath = path.join(projectRoot, 'package.json');
try {
  const packageJson = require(packageJsonPath);
  packageJson.scripts = packageJson.scripts || {};
  packageJson.scripts['emulator'] = './scripts/start-emulator.sh';
  packageJson.scripts['start-emulator-fixed'] = 'npm run emulator && npm run start-fixed';
  fs.writeFileSync(packageJsonPath, JSON.stringify(packageJson, null, 2), 'utf8');
  console.log('‚úÖ Updated package.json with new scripts');
} catch (error) {
  console.error(`‚ùå Error updating package.json: ${error.message}`);
}

// Kill any Metro bundler processes
console.log('\nüîÑ Stopping any Metro bundler processes...');
try {
  if (isMac) {
    execSync('pkill -f "metro" || true');
    console.log('‚úÖ Stopped Metro bundler processes');
  }
} catch (error) {
  // Ignore errors from pkill
}

console.log('\nüì± Android Emulator Instructions:');
console.log('1. Run: npm run emulator');
console.log('2. Wait for the emulator to fully boot');
console.log('3. Run: npm run start-fixed');
console.log('\nOr simply run: npm run start-emulator-fixed');

console.log('\n‚ú® Setup complete!'); 